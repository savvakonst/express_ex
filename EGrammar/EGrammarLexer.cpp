
// Generated from EGrammar.g4 by ANTLR 4.10.1


#include "EGrammarLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct EGrammarLexerStaticData final {
  EGrammarLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  EGrammarLexerStaticData(const EGrammarLexerStaticData&) = delete;
  EGrammarLexerStaticData(EGrammarLexerStaticData&&) = delete;
  EGrammarLexerStaticData& operator=(const EGrammarLexerStaticData&) = delete;
  EGrammarLexerStaticData& operator=(EGrammarLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

std::once_flag egrammarlexerLexerOnceFlag;
EGrammarLexerStaticData *egrammarlexerLexerStaticData = nullptr;

void egrammarlexerLexerInitialize() {
  assert(egrammarlexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<EGrammarLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
      "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
      "T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
      "LOG", "LOG10", "COS", "SIN", "EXP", "C_FLOAT", "C_INT", "C_DOUBLE", 
      "C_INT64", "SPEC_SYMBOL", "MUL", "DIV", "ADD", "SUB", "EQ", "NEQ", 
      "LESS_", "MORE_", "LESSEQ", "MOREEQ", "LSH", "RSH", "BITWISE_AND", 
      "BITWISE_OR", "BITWISE_XOR", "ID", "INT64", "INT", "DOUBLE", "FLOAT", 
      "DoublePostfix", "FloatPostfix", "STRINGLITERAL", "COMMENT", "NEWLINE", 
      "WS"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "','", "'='", "'param'", "'('", "')'", "'out'", "'func'", "'function'", 
      "':'", "';'", "'end'", "'return '", "'integrate'", "'convolve'", "'recconvolve'", 
      "'range'", "'decimation'", "'shift'", "'['", "']'", "'.'", "'type'", 
      "'**'", "'^'", "'\\u003F'", "", "", "", "", "", "'float'", "'int'", 
      "'double'", "'int64'", "", "'*'", "'/'", "'+'", "'-'", "'=='", "'!='", 
      "'<'", "'>'", "'<='", "'>='", "'<<'", "'>>'", "'&'", "'|'", "'bxor'", 
      "", "", "", "", "", "'d'", "'f'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "LOG", "LOG10", "COS", "SIN", 
      "EXP", "C_FLOAT", "C_INT", "C_DOUBLE", "C_INT64", "SPEC_SYMBOL", "MUL", 
      "DIV", "ADD", "SUB", "EQ", "NEQ", "LESS_", "MORE_", "LESSEQ", "MOREEQ", 
      "LSH", "RSH", "BITWISE_AND", "BITWISE_OR", "BITWISE_XOR", "ID", "INT64", 
      "INT", "DOUBLE", "FLOAT", "DoublePostfix", "FloatPostfix", "STRINGLITERAL", 
      "COMMENT", "NEWLINE", "WS"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,61,487,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,1,0,1,0,1,1,1,1,1,2,1,2,
  	1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,
  	7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,10,
  	1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,
  	1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,
  	1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,
  	1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
  	1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,
  	1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,25,1,25,
  	1,25,1,25,3,25,250,8,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,
  	1,26,3,26,262,8,26,1,27,1,27,1,27,1,27,1,27,1,27,3,27,270,8,27,1,28,1,
  	28,1,28,1,28,1,28,1,28,3,28,278,8,28,1,29,1,29,1,29,1,29,1,29,1,29,3,
  	29,286,8,29,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,32,1,
  	32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,
  	34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
  	34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
  	34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
  	34,3,34,356,8,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,
  	39,1,40,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,43,1,44,1,44,1,44,1,
  	45,1,45,1,45,1,46,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,49,1,49,1,
  	49,1,50,1,50,5,50,399,8,50,10,50,12,50,402,9,50,1,51,4,51,405,8,51,11,
  	51,12,51,406,1,51,1,51,1,51,1,51,1,51,1,52,4,52,415,8,52,11,52,12,52,
  	416,1,52,1,52,1,52,1,52,3,52,423,8,52,1,53,4,53,426,8,53,11,53,12,53,
  	427,1,53,1,53,5,53,432,8,53,10,53,12,53,435,9,53,1,53,1,53,1,54,4,54,
  	440,8,54,11,54,12,54,441,1,54,1,54,5,54,446,8,54,10,54,12,54,449,9,54,
  	1,54,3,54,452,8,54,1,55,1,55,1,56,1,56,1,57,1,57,5,57,460,8,57,10,57,
  	12,57,463,9,57,1,57,1,57,1,58,1,58,5,58,469,8,58,10,58,12,58,472,9,58,
  	1,58,1,58,1,59,3,59,477,8,59,1,59,1,59,1,60,4,60,482,8,60,11,60,12,60,
  	483,1,60,1,60,0,0,61,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
  	11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,
  	45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,
  	34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,
  	91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,
  	56,113,57,115,58,117,59,119,60,121,61,1,0,6,2,0,65,90,97,122,4,0,48,57,
  	65,90,95,95,97,122,1,0,48,57,3,0,10,10,13,13,34,34,2,0,10,10,13,13,2,
  	0,9,9,32,32,511,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,
  	0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,
  	0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,
  	31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,
  	0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,
  	0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,
  	63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,
  	0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,
  	0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,
  	95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,
  	1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,
  	1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,1,123,1,0,0,0,3,125,
  	1,0,0,0,5,127,1,0,0,0,7,133,1,0,0,0,9,135,1,0,0,0,11,137,1,0,0,0,13,141,
  	1,0,0,0,15,146,1,0,0,0,17,155,1,0,0,0,19,157,1,0,0,0,21,159,1,0,0,0,23,
  	163,1,0,0,0,25,171,1,0,0,0,27,181,1,0,0,0,29,190,1,0,0,0,31,202,1,0,0,
  	0,33,208,1,0,0,0,35,219,1,0,0,0,37,225,1,0,0,0,39,227,1,0,0,0,41,229,
  	1,0,0,0,43,231,1,0,0,0,45,236,1,0,0,0,47,239,1,0,0,0,49,241,1,0,0,0,51,
  	249,1,0,0,0,53,261,1,0,0,0,55,269,1,0,0,0,57,277,1,0,0,0,59,285,1,0,0,
  	0,61,287,1,0,0,0,63,293,1,0,0,0,65,297,1,0,0,0,67,304,1,0,0,0,69,355,
  	1,0,0,0,71,357,1,0,0,0,73,359,1,0,0,0,75,361,1,0,0,0,77,363,1,0,0,0,79,
  	365,1,0,0,0,81,368,1,0,0,0,83,371,1,0,0,0,85,373,1,0,0,0,87,375,1,0,0,
  	0,89,378,1,0,0,0,91,381,1,0,0,0,93,384,1,0,0,0,95,387,1,0,0,0,97,389,
  	1,0,0,0,99,391,1,0,0,0,101,396,1,0,0,0,103,404,1,0,0,0,105,414,1,0,0,
  	0,107,425,1,0,0,0,109,439,1,0,0,0,111,453,1,0,0,0,113,455,1,0,0,0,115,
  	457,1,0,0,0,117,466,1,0,0,0,119,476,1,0,0,0,121,481,1,0,0,0,123,124,5,
  	44,0,0,124,2,1,0,0,0,125,126,5,61,0,0,126,4,1,0,0,0,127,128,5,112,0,0,
  	128,129,5,97,0,0,129,130,5,114,0,0,130,131,5,97,0,0,131,132,5,109,0,0,
  	132,6,1,0,0,0,133,134,5,40,0,0,134,8,1,0,0,0,135,136,5,41,0,0,136,10,
  	1,0,0,0,137,138,5,111,0,0,138,139,5,117,0,0,139,140,5,116,0,0,140,12,
  	1,0,0,0,141,142,5,102,0,0,142,143,5,117,0,0,143,144,5,110,0,0,144,145,
  	5,99,0,0,145,14,1,0,0,0,146,147,5,102,0,0,147,148,5,117,0,0,148,149,5,
  	110,0,0,149,150,5,99,0,0,150,151,5,116,0,0,151,152,5,105,0,0,152,153,
  	5,111,0,0,153,154,5,110,0,0,154,16,1,0,0,0,155,156,5,58,0,0,156,18,1,
  	0,0,0,157,158,5,59,0,0,158,20,1,0,0,0,159,160,5,101,0,0,160,161,5,110,
  	0,0,161,162,5,100,0,0,162,22,1,0,0,0,163,164,5,114,0,0,164,165,5,101,
  	0,0,165,166,5,116,0,0,166,167,5,117,0,0,167,168,5,114,0,0,168,169,5,110,
  	0,0,169,170,5,32,0,0,170,24,1,0,0,0,171,172,5,105,0,0,172,173,5,110,0,
  	0,173,174,5,116,0,0,174,175,5,101,0,0,175,176,5,103,0,0,176,177,5,114,
  	0,0,177,178,5,97,0,0,178,179,5,116,0,0,179,180,5,101,0,0,180,26,1,0,0,
  	0,181,182,5,99,0,0,182,183,5,111,0,0,183,184,5,110,0,0,184,185,5,118,
  	0,0,185,186,5,111,0,0,186,187,5,108,0,0,187,188,5,118,0,0,188,189,5,101,
  	0,0,189,28,1,0,0,0,190,191,5,114,0,0,191,192,5,101,0,0,192,193,5,99,0,
  	0,193,194,5,99,0,0,194,195,5,111,0,0,195,196,5,110,0,0,196,197,5,118,
  	0,0,197,198,5,111,0,0,198,199,5,108,0,0,199,200,5,118,0,0,200,201,5,101,
  	0,0,201,30,1,0,0,0,202,203,5,114,0,0,203,204,5,97,0,0,204,205,5,110,0,
  	0,205,206,5,103,0,0,206,207,5,101,0,0,207,32,1,0,0,0,208,209,5,100,0,
  	0,209,210,5,101,0,0,210,211,5,99,0,0,211,212,5,105,0,0,212,213,5,109,
  	0,0,213,214,5,97,0,0,214,215,5,116,0,0,215,216,5,105,0,0,216,217,5,111,
  	0,0,217,218,5,110,0,0,218,34,1,0,0,0,219,220,5,115,0,0,220,221,5,104,
  	0,0,221,222,5,105,0,0,222,223,5,102,0,0,223,224,5,116,0,0,224,36,1,0,
  	0,0,225,226,5,91,0,0,226,38,1,0,0,0,227,228,5,93,0,0,228,40,1,0,0,0,229,
  	230,5,46,0,0,230,42,1,0,0,0,231,232,5,116,0,0,232,233,5,121,0,0,233,234,
  	5,112,0,0,234,235,5,101,0,0,235,44,1,0,0,0,236,237,5,42,0,0,237,238,5,
  	42,0,0,238,46,1,0,0,0,239,240,5,94,0,0,240,48,1,0,0,0,241,242,5,63,0,
  	0,242,50,1,0,0,0,243,244,5,108,0,0,244,245,5,111,0,0,245,250,5,103,0,
  	0,246,247,5,76,0,0,247,248,5,111,0,0,248,250,5,103,0,0,249,243,1,0,0,
  	0,249,246,1,0,0,0,250,52,1,0,0,0,251,252,5,108,0,0,252,253,5,111,0,0,
  	253,254,5,103,0,0,254,255,5,49,0,0,255,262,5,48,0,0,256,257,5,76,0,0,
  	257,258,5,111,0,0,258,259,5,103,0,0,259,260,5,49,0,0,260,262,5,48,0,0,
  	261,251,1,0,0,0,261,256,1,0,0,0,262,54,1,0,0,0,263,264,5,99,0,0,264,265,
  	5,111,0,0,265,270,5,115,0,0,266,267,5,67,0,0,267,268,5,111,0,0,268,270,
  	5,115,0,0,269,263,1,0,0,0,269,266,1,0,0,0,270,56,1,0,0,0,271,272,5,115,
  	0,0,272,273,5,105,0,0,273,278,5,110,0,0,274,275,5,83,0,0,275,276,5,105,
  	0,0,276,278,5,110,0,0,277,271,1,0,0,0,277,274,1,0,0,0,278,58,1,0,0,0,
  	279,280,5,101,0,0,280,281,5,120,0,0,281,286,5,112,0,0,282,283,5,69,0,
  	0,283,284,5,120,0,0,284,286,5,112,0,0,285,279,1,0,0,0,285,282,1,0,0,0,
  	286,60,1,0,0,0,287,288,5,102,0,0,288,289,5,108,0,0,289,290,5,111,0,0,
  	290,291,5,97,0,0,291,292,5,116,0,0,292,62,1,0,0,0,293,294,5,105,0,0,294,
  	295,5,110,0,0,295,296,5,116,0,0,296,64,1,0,0,0,297,298,5,100,0,0,298,
  	299,5,111,0,0,299,300,5,117,0,0,300,301,5,98,0,0,301,302,5,108,0,0,302,
  	303,5,101,0,0,303,66,1,0,0,0,304,305,5,105,0,0,305,306,5,110,0,0,306,
  	307,5,116,0,0,307,308,5,54,0,0,308,309,5,52,0,0,309,68,1,0,0,0,310,311,
  	5,102,0,0,311,312,5,117,0,0,312,313,5,110,0,0,313,356,5,99,0,0,314,315,
  	5,114,0,0,315,316,5,101,0,0,316,317,5,116,0,0,317,318,5,117,0,0,318,319,
  	5,114,0,0,319,320,5,110,0,0,320,356,5,32,0,0,321,322,5,99,0,0,322,323,
  	5,111,0,0,323,324,5,110,0,0,324,325,5,118,0,0,325,326,5,111,0,0,326,327,
  	5,108,0,0,327,328,5,118,0,0,328,356,5,101,0,0,329,330,5,105,0,0,330,331,
  	5,110,0,0,331,332,5,101,0,0,332,333,5,103,0,0,333,334,5,114,0,0,334,335,
  	5,97,0,0,335,336,5,116,0,0,336,356,5,101,0,0,337,338,5,114,0,0,338,339,
  	5,97,0,0,339,340,5,110,0,0,340,341,5,103,0,0,341,356,5,101,0,0,342,343,
  	5,115,0,0,343,344,5,104,0,0,344,345,5,105,0,0,345,346,5,102,0,0,346,356,
  	5,116,0,0,347,348,5,112,0,0,348,349,5,97,0,0,349,350,5,114,0,0,350,351,
  	5,97,0,0,351,356,5,109,0,0,352,353,5,111,0,0,353,354,5,117,0,0,354,356,
  	5,116,0,0,355,310,1,0,0,0,355,314,1,0,0,0,355,321,1,0,0,0,355,329,1,0,
  	0,0,355,337,1,0,0,0,355,342,1,0,0,0,355,347,1,0,0,0,355,352,1,0,0,0,356,
  	70,1,0,0,0,357,358,5,42,0,0,358,72,1,0,0,0,359,360,5,47,0,0,360,74,1,
  	0,0,0,361,362,5,43,0,0,362,76,1,0,0,0,363,364,5,45,0,0,364,78,1,0,0,0,
  	365,366,5,61,0,0,366,367,5,61,0,0,367,80,1,0,0,0,368,369,5,33,0,0,369,
  	370,5,61,0,0,370,82,1,0,0,0,371,372,5,60,0,0,372,84,1,0,0,0,373,374,5,
  	62,0,0,374,86,1,0,0,0,375,376,5,60,0,0,376,377,5,61,0,0,377,88,1,0,0,
  	0,378,379,5,62,0,0,379,380,5,61,0,0,380,90,1,0,0,0,381,382,5,60,0,0,382,
  	383,5,60,0,0,383,92,1,0,0,0,384,385,5,62,0,0,385,386,5,62,0,0,386,94,
  	1,0,0,0,387,388,5,38,0,0,388,96,1,0,0,0,389,390,5,124,0,0,390,98,1,0,
  	0,0,391,392,5,98,0,0,392,393,5,120,0,0,393,394,5,111,0,0,394,395,5,114,
  	0,0,395,100,1,0,0,0,396,400,7,0,0,0,397,399,7,1,0,0,398,397,1,0,0,0,399,
  	402,1,0,0,0,400,398,1,0,0,0,400,401,1,0,0,0,401,102,1,0,0,0,402,400,1,
  	0,0,0,403,405,7,2,0,0,404,403,1,0,0,0,405,406,1,0,0,0,406,404,1,0,0,0,
  	406,407,1,0,0,0,407,408,1,0,0,0,408,409,5,46,0,0,409,410,5,105,0,0,410,
  	411,5,54,0,0,411,412,5,52,0,0,412,104,1,0,0,0,413,415,7,2,0,0,414,413,
  	1,0,0,0,415,416,1,0,0,0,416,414,1,0,0,0,416,417,1,0,0,0,417,422,1,0,0,
  	0,418,419,5,46,0,0,419,420,5,105,0,0,420,421,5,51,0,0,421,423,5,50,0,
  	0,422,418,1,0,0,0,422,423,1,0,0,0,423,106,1,0,0,0,424,426,7,2,0,0,425,
  	424,1,0,0,0,426,427,1,0,0,0,427,425,1,0,0,0,427,428,1,0,0,0,428,429,1,
  	0,0,0,429,433,5,46,0,0,430,432,7,2,0,0,431,430,1,0,0,0,432,435,1,0,0,
  	0,433,431,1,0,0,0,433,434,1,0,0,0,434,436,1,0,0,0,435,433,1,0,0,0,436,
  	437,3,111,55,0,437,108,1,0,0,0,438,440,7,2,0,0,439,438,1,0,0,0,440,441,
  	1,0,0,0,441,439,1,0,0,0,441,442,1,0,0,0,442,443,1,0,0,0,443,447,5,46,
  	0,0,444,446,7,2,0,0,445,444,1,0,0,0,446,449,1,0,0,0,447,445,1,0,0,0,447,
  	448,1,0,0,0,448,451,1,0,0,0,449,447,1,0,0,0,450,452,3,113,56,0,451,450,
  	1,0,0,0,451,452,1,0,0,0,452,110,1,0,0,0,453,454,5,100,0,0,454,112,1,0,
  	0,0,455,456,5,102,0,0,456,114,1,0,0,0,457,461,5,34,0,0,458,460,8,3,0,
  	0,459,458,1,0,0,0,460,463,1,0,0,0,461,459,1,0,0,0,461,462,1,0,0,0,462,
  	464,1,0,0,0,463,461,1,0,0,0,464,465,5,34,0,0,465,116,1,0,0,0,466,470,
  	5,35,0,0,467,469,8,4,0,0,468,467,1,0,0,0,469,472,1,0,0,0,470,468,1,0,
  	0,0,470,471,1,0,0,0,471,473,1,0,0,0,472,470,1,0,0,0,473,474,6,58,0,0,
  	474,118,1,0,0,0,475,477,5,13,0,0,476,475,1,0,0,0,476,477,1,0,0,0,477,
  	478,1,0,0,0,478,479,5,10,0,0,479,120,1,0,0,0,480,482,7,5,0,0,481,480,
  	1,0,0,0,482,483,1,0,0,0,483,481,1,0,0,0,483,484,1,0,0,0,484,485,1,0,0,
  	0,485,486,6,60,0,0,486,122,1,0,0,0,20,0,249,261,269,277,285,355,400,406,
  	416,422,427,433,441,447,451,461,470,476,483,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  egrammarlexerLexerStaticData = staticData.release();
}

}

EGrammarLexer::EGrammarLexer(CharStream *input) : Lexer(input) {
  EGrammarLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *egrammarlexerLexerStaticData->atn, egrammarlexerLexerStaticData->decisionToDFA, egrammarlexerLexerStaticData->sharedContextCache);
}

EGrammarLexer::~EGrammarLexer() {
  delete _interpreter;
}

std::string EGrammarLexer::getGrammarFileName() const {
  return "EGrammar.g4";
}

const std::vector<std::string>& EGrammarLexer::getRuleNames() const {
  return egrammarlexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& EGrammarLexer::getChannelNames() const {
  return egrammarlexerLexerStaticData->channelNames;
}

const std::vector<std::string>& EGrammarLexer::getModeNames() const {
  return egrammarlexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& EGrammarLexer::getVocabulary() const {
  return egrammarlexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView EGrammarLexer::getSerializedATN() const {
  return egrammarlexerLexerStaticData->serializedATN;
}

const atn::ATN& EGrammarLexer::getATN() const {
  return *egrammarlexerLexerStaticData->atn;
}




void EGrammarLexer::initialize() {
  std::call_once(egrammarlexerLexerOnceFlag, egrammarlexerLexerInitialize);
}
